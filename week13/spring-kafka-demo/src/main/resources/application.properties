###########\u3010Kafka\u96c6\u7fa4\u3011###########
spring.kafka.bootstrap-servers=localhost:9001,localhost:9002,localhost:9003
###########\u3010\u521d\u59cb\u5316\u751f\u4ea7\u8005\u914d\u7f6e\u3011###########
# \u91cd\u8bd5\u6b21\u6570
spring.kafka.producer.retries=0
# \u5e94\u7b54\u7ea7\u522b:\u591a\u5c11\u4e2a\u5206\u533a\u526f\u672c\u5907\u4efd\u5b8c\u6210\u65f6\u5411\u751f\u4ea7\u8005\u53d1\u9001ack\u786e\u8ba4(\u53ef\u90090\u30011\u3001all/-1)
spring.kafka.producer.acks=1
# \u6279\u91cf\u5927\u5c0f
spring.kafka.producer.batch-size=16384
# \u63d0\u4ea4\u5ef6\u65f6
spring.kafka.producer.properties.linger.ms=0
# \u5f53\u751f\u4ea7\u7aef\u79ef\u7d2f\u7684\u6d88\u606f\u8fbe\u5230batch-size\u6216\u63a5\u6536\u5230\u6d88\u606flinger.ms\u540e,\u751f\u4ea7\u8005\u5c31\u4f1a\u5c06\u6d88\u606f\u63d0\u4ea4\u7ed9kafka
# linger.ms\u4e3a0\u8868\u793a\u6bcf\u63a5\u6536\u5230\u4e00\u6761\u6d88\u606f\u5c31\u63d0\u4ea4\u7ed9kafka,\u8fd9\u65f6\u5019batch-size\u5176\u5b9e\u5c31\u6ca1\u7528\u4e86
\u200b
# \u751f\u4ea7\u7aef\u7f13\u51b2\u533a\u5927\u5c0f
spring.kafka.producer.buffer-memory = 33554432
# Kafka\u63d0\u4f9b\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7c7b
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
# \u81ea\u5b9a\u4e49\u5206\u533a\u5668
# spring.kafka.producer.properties.partitioner.class=com.felix.kafka.producer.CustomizePartitioner
\u200b
###########\u3010\u521d\u59cb\u5316\u6d88\u8d39\u8005\u914d\u7f6e\u3011###########
# \u9ed8\u8ba4\u7684\u6d88\u8d39\u7ec4ID
spring.kafka.consumer.properties.group.id=defaultConsumerGroup
# \u662f\u5426\u81ea\u52a8\u63d0\u4ea4offset
spring.kafka.consumer.enable-auto-commit=true
# \u63d0\u4ea4offset\u5ef6\u65f6(\u63a5\u6536\u5230\u6d88\u606f\u540e\u591a\u4e45\u63d0\u4ea4offset)
spring.kafka.consumer.auto.commit.interval.ms=1000
# \u5f53kafka\u4e2d\u6ca1\u6709\u521d\u59cboffset\u6216offset\u8d85\u51fa\u8303\u56f4\u65f6\u5c06\u81ea\u52a8\u91cd\u7f6eoffset
# earliest:\u91cd\u7f6e\u4e3a\u5206\u533a\u4e2d\u6700\u5c0f\u7684offset;
# latest:\u91cd\u7f6e\u4e3a\u5206\u533a\u4e2d\u6700\u65b0\u7684offset(\u6d88\u8d39\u5206\u533a\u4e2d\u65b0\u4ea7\u751f\u7684\u6570\u636e);
# none:\u53ea\u8981\u6709\u4e00\u4e2a\u5206\u533a\u4e0d\u5b58\u5728\u5df2\u63d0\u4ea4\u7684offset,\u5c31\u629b\u51fa\u5f02\u5e38;
spring.kafka.consumer.auto-offset-reset=latest
# \u6d88\u8d39\u4f1a\u8bdd\u8d85\u65f6\u65f6\u95f4(\u8d85\u8fc7\u8fd9\u4e2a\u65f6\u95f4consumer\u6ca1\u6709\u53d1\u9001\u5fc3\u8df3,\u5c31\u4f1a\u89e6\u53d1rebalance\u64cd\u4f5c)
spring.kafka.consumer.properties.session.timeout.ms=120000
# \u6d88\u8d39\u8bf7\u6c42\u8d85\u65f6\u65f6\u95f4
spring.kafka.consumer.properties.request.timeout.ms=180000
# Kafka\u63d0\u4f9b\u7684\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316\u7c7b
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# \u6d88\u8d39\u7aef\u76d1\u542c\u7684topic\u4e0d\u5b58\u5728\u65f6\uff0c\u9879\u76ee\u542f\u52a8\u4f1a\u62a5\u9519(\u5173\u6389)
spring.kafka.listener.missing-topics-fatal=false
# \u8bbe\u7f6e\u6279\u91cf\u6d88\u8d39
# spring.kafka.listener.type=batch
# \u6279\u91cf\u6d88\u8d39\u6bcf\u6b21\u6700\u591a\u6d88\u8d39\u591a\u5c11\u6761\u6d88\u606f
# spring.kafka.consumer.max-poll-records=50
